/* Generated By:JJTree&JavaCC: Do not edit this line. SelParserConstants.java */
package com.netflix.sel.ast;

/** Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start() */
public interface SelParserConstants {

  /** End of File. */
  int EOF = 0;

  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;

  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;

  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;

  /** RegularExpression Id. */
  int ABSTRACT = 12;

  /** RegularExpression Id. */
  int BOOLEAN = 13;

  /** RegularExpression Id. */
  int BREAK = 14;

  /** RegularExpression Id. */
  int BYTE = 15;

  /** RegularExpression Id. */
  int CASE = 16;

  /** RegularExpression Id. */
  int CATCH = 17;

  /** RegularExpression Id. */
  int CHAR = 18;

  /** RegularExpression Id. */
  int CLASS = 19;

  /** RegularExpression Id. */
  int CONST = 20;

  /** RegularExpression Id. */
  int CONTINUE = 21;

  /** RegularExpression Id. */
  int _DEFAULT = 22;

  /** RegularExpression Id. */
  int DO = 23;

  /** RegularExpression Id. */
  int DOUBLE = 24;

  /** RegularExpression Id. */
  int ELSE = 25;

  /** RegularExpression Id. */
  int EXTENDS = 26;

  /** RegularExpression Id. */
  int FALSE = 27;

  /** RegularExpression Id. */
  int FINAL = 28;

  /** RegularExpression Id. */
  int FINALLY = 29;

  /** RegularExpression Id. */
  int FLOAT = 30;

  /** RegularExpression Id. */
  int FOR = 31;

  /** RegularExpression Id. */
  int GOTO = 32;

  /** RegularExpression Id. */
  int IF = 33;

  /** RegularExpression Id. */
  int IMPLEMENTS = 34;

  /** RegularExpression Id. */
  int IMPORT = 35;

  /** RegularExpression Id. */
  int INSTANCEOF = 36;

  /** RegularExpression Id. */
  int INT = 37;

  /** RegularExpression Id. */
  int INTERFACE = 38;

  /** RegularExpression Id. */
  int LONG = 39;

  /** RegularExpression Id. */
  int NATIVE = 40;

  /** RegularExpression Id. */
  int NEW = 41;

  /** RegularExpression Id. */
  int NULL = 42;

  /** RegularExpression Id. */
  int PACKAGE = 43;

  /** RegularExpression Id. */
  int PRIVATE = 44;

  /** RegularExpression Id. */
  int PROTECTED = 45;

  /** RegularExpression Id. */
  int PUBLIC = 46;

  /** RegularExpression Id. */
  int RETURN = 47;

  /** RegularExpression Id. */
  int SHORT = 48;

  /** RegularExpression Id. */
  int STATIC = 49;

  /** RegularExpression Id. */
  int SUPER = 50;

  /** RegularExpression Id. */
  int SWITCH = 51;

  /** RegularExpression Id. */
  int SYNCHRONIZED = 52;

  /** RegularExpression Id. */
  int THIS = 53;

  /** RegularExpression Id. */
  int THROW = 54;

  /** RegularExpression Id. */
  int THROWS = 55;

  /** RegularExpression Id. */
  int TRANSIENT = 56;

  /** RegularExpression Id. */
  int TRUE = 57;

  /** RegularExpression Id. */
  int TRY = 58;

  /** RegularExpression Id. */
  int VOID = 59;

  /** RegularExpression Id. */
  int VOLATILE = 60;

  /** RegularExpression Id. */
  int WHILE = 61;

  /** RegularExpression Id. */
  int INTEGER_LITERAL = 62;

  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 63;

  /** RegularExpression Id. */
  int HEX_LITERAL = 64;

  /** RegularExpression Id. */
  int OCTAL_LITERAL = 65;

  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;

  /** RegularExpression Id. */
  int EXPONENT = 67;

  /** RegularExpression Id. */
  int STRING_LITERAL = 68;

  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 69;

  /** RegularExpression Id. */
  int DOUBLE_QUOTED_STRING = 70;

  /** RegularExpression Id. */
  int IDENTIFIER = 71;

  /** RegularExpression Id. */
  int LETTER = 72;

  /** RegularExpression Id. */
  int DIGIT = 73;

  /** RegularExpression Id. */
  int LPAREN = 74;

  /** RegularExpression Id. */
  int RPAREN = 75;

  /** RegularExpression Id. */
  int LBRACE = 76;

  /** RegularExpression Id. */
  int RBRACE = 77;

  /** RegularExpression Id. */
  int LBRACKET = 78;

  /** RegularExpression Id. */
  int RBRACKET = 79;

  /** RegularExpression Id. */
  int SEMICOLON = 80;

  /** RegularExpression Id. */
  int COMMA = 81;

  /** RegularExpression Id. */
  int DOT = 82;

  /** RegularExpression Id. */
  int ASSIGN = 83;

  /** RegularExpression Id. */
  int GT = 84;

  /** RegularExpression Id. */
  int LT = 85;

  /** RegularExpression Id. */
  int BANG = 86;

  /** RegularExpression Id. */
  int TILDE = 87;

  /** RegularExpression Id. */
  int HOOK = 88;

  /** RegularExpression Id. */
  int COLON = 89;

  /** RegularExpression Id. */
  int EQ = 90;

  /** RegularExpression Id. */
  int LE = 91;

  /** RegularExpression Id. */
  int GE = 92;

  /** RegularExpression Id. */
  int NE = 93;

  /** RegularExpression Id. */
  int SC_OR = 94;

  /** RegularExpression Id. */
  int SC_AND = 95;

  /** RegularExpression Id. */
  int INCR = 96;

  /** RegularExpression Id. */
  int DECR = 97;

  /** RegularExpression Id. */
  int PLUS = 98;

  /** RegularExpression Id. */
  int MINUS = 99;

  /** RegularExpression Id. */
  int STAR = 100;

  /** RegularExpression Id. */
  int SLASH = 101;

  /** RegularExpression Id. */
  int BIT_AND = 102;

  /** RegularExpression Id. */
  int BIT_OR = 103;

  /** RegularExpression Id. */
  int XOR = 104;

  /** RegularExpression Id. */
  int REM = 105;

  /** RegularExpression Id. */
  int LSHIFT = 106;

  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 107;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 108;

  /** RegularExpression Id. */
  int PLUSASSIGN = 109;

  /** RegularExpression Id. */
  int MINUSASSIGN = 110;

  /** RegularExpression Id. */
  int STARASSIGN = 111;

  /** RegularExpression Id. */
  int SLASHASSIGN = 112;

  /** RegularExpression Id. */
  int ANDASSIGN = 113;

  /** RegularExpression Id. */
  int ORASSIGN = 114;

  /** RegularExpression Id. */
  int XORASSIGN = 115;

  /** RegularExpression Id. */
  int REMASSIGN = 116;

  /** RegularExpression Id. */
  int LSHIFTASSIGN = 117;

  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 118;

  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 119;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;

  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<SINGLE_QUOTED_STRING>",
    "<DOUBLE_QUOTED_STRING>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
  };
}
