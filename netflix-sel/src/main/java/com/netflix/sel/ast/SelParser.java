/* SelParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SelParser.java */
package com.netflix.sel.ast;

import com.netflix.sel.type.SelBoolean;
import com.netflix.sel.type.SelDouble;
import com.netflix.sel.type.SelLong;
import com.netflix.sel.type.SelString;
import com.netflix.sel.type.SelType;
import com.netflix.sel.type.SelTypeUtil;
import com.netflix.sel.visitor.SelOp;

public class SelParser /*@bgen(jjtree)*/ implements SelParserTreeConstants, SelParserConstants {
  /*@bgen(jjtree)*/
  protected JJTSelParserState jjtree = new JJTSelParserState();

  /**
   * *************************************** THE SEL GRAMMAR STARTS HERE *
   * ***************************************
   */

  /*
   * Program structuring syntax follows.
   */
  public final ASTExecute Execute() throws ParseException {
    /*@bgen(jjtree) Execute */
    ASTExecute jjtn000 = new ASTExecute(this, JJTEXECUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch (jj_nt.kind) {
          case IMPORT:
            {
              ;
              break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        switch (jj_nt.kind) {
          case BOOLEAN:
          case BREAK:
          case CONTINUE:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case THROW:
          case TRUE:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case BANG:
          case PLUS:
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
        }
        BlockStatement();
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {
        if ("" != null) return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  public final void ImportDeclaration() throws ParseException {
    /*@bgen(jjtree) ImportDeclaration */
    ASTImportDeclaration jjtn000 = new ASTImportDeclaration(this, JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPORT);
      switch (jj_nt.kind) {
        case STATIC:
          {
            jj_consume_token(STATIC);
            break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
      }
      jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
      }
      switch (jj_nt.kind) {
        case DOT:
          {
            jj_consume_token(DOT);
            jj_consume_token(STAR);
            break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void VariableDeclarator() throws ParseException {
    /*@bgen(jjtree) VariableDeclarator */
    ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(this, JJTVARIABLEDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      VariableDeclaratorId();
      switch (jj_nt.kind) {
        case ASSIGN:
          {
            jj_consume_token(ASSIGN);
            VariableInitializer();
            break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void VariableDeclaratorId() throws ParseException {
    /*@bgen(jjtree) VariableDeclaratorId */
    ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(this, JJTVARIABLEDECLARATORID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void VariableInitializer() throws ParseException {
    Expression();
  }

  // Only support one dimensional array
  public final void ArrayInitializer() throws ParseException {
    /*@bgen(jjtree) ArrayInitializer */
    ASTArrayInitializer jjtn000 = new ASTArrayInitializer(this, JJTARRAYINITIALIZER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      switch (jj_nt.kind) {
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          {
            VariableInitializer();
            label_4:
            while (true) {
              if (jj_2_2(2)) {
                ;
              } else {
                break label_4;
              }
              jj_consume_token(COMMA);
              VariableInitializer();
            }
            break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
      }
      switch (jj_nt.kind) {
        case COMMA:
          {
            jj_consume_token(COMMA);
            break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  /*
   * Type, name and expression syntax follows.
   */

  // Only support one dimensional array
  public final void Type() throws ParseException {
    /*@bgen(jjtree) Type */
    ASTType jjtn000 = new ASTType(this, JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
        case BOOLEAN:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
          {
            PrimitiveType();
            break;
          }
        case IDENTIFIER:
          {
            ClassType();
            break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      switch (jj_nt.kind) {
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            jjtn000.value = Boolean.TRUE; /* an array */
            break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // int/long is mapped to Java Long and float and double is mapped to Java Double.
  public final void PrimitiveType() throws ParseException {
    /*@bgen(jjtree) PrimitiveType */
    ASTPrimitiveType jjtn000 = new ASTPrimitiveType(this, JJTPRIMITIVETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      switch (jj_nt.kind) {
        case BOOLEAN:
          {
            t = jj_consume_token(BOOLEAN);
            break;
          }
        case INT:
          {
            t = jj_consume_token(INT);
            break;
          }
        case LONG:
          {
            t = jj_consume_token(LONG);
            break;
          }
        case FLOAT:
          {
            t = jj_consume_token(FLOAT);
            break;
          }
        case DOUBLE:
          {
            t = jj_consume_token(DOUBLE);
            break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // Not support full path class, e.g. java.lang.Double
  public final void ClassType() throws ParseException {
    /*@bgen(jjtree) ClassType */
    ASTClassType jjtn000 = new ASTClassType(this, JJTCLASSTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void Name() throws ParseException {
    /*@bgen(jjtree) Name */
    ASTName jjtn000 = new ASTName(this, JJTNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  /*
   * Expression syntax follows.
   */
  public final void Expression() throws ParseException {
    /*@bgen(jjtree) Expression */
    ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_3(2147483647)) {
        Assignment();
      } else {
        switch (jj_nt.kind) {
          case FALSE:
          case NEW:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case PLUS:
          case MINUS:
            {
              ConditionalExpression();
              break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void Assignment() throws ParseException {
    /*@bgen(jjtree) Assignment */
    ASTAssignment jjtn000 = new ASTAssignment(this, JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      VariableDeclaratorId();
      switch (jj_nt.kind) {
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            Expression();
            jjtn000.value = Boolean.TRUE; /* an array */
            jj_consume_token(RBRACKET);
            break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
      }
      AssignmentOperator();
      Expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // Bitwise operator is not supported for now.
  public final void AssignmentOperator() throws ParseException {
    /*@bgen(jjtree) AssignmentOperator */
    ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(this, JJTASSIGNMENTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
        case ASSIGN:
          {
            jj_consume_token(ASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.ASSIGN;
            break;
          }
        case STARASSIGN:
          {
            jj_consume_token(STARASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.MUL_ASSIGN;
            break;
          }
        case SLASHASSIGN:
          {
            jj_consume_token(SLASHASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.DIV_ASSIGN;
            break;
          }
        case REMASSIGN:
          {
            jj_consume_token(REMASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.MOD_ASSIGN;
            break;
          }
        case PLUSASSIGN:
          {
            jj_consume_token(PLUSASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.ADD_ASSIGN;
            break;
          }
        case MINUSASSIGN:
          {
            jj_consume_token(MINUSASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelOp.SUB_ASSIGN;
            break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch (jj_nt.kind) {
      case HOOK:
        {
          jj_consume_token(HOOK);
          Expression();
          jj_consume_token(COLON);
          Expression();
          ASTTernary jjtn001 = new ASTTernary(this, JJTTERNARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jjtree.closeNodeScope(jjtn001, 3);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
            jjtn001.value = SelOp.TERNARY;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, 3);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
          break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
    }
  }

  public final void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_5:
    while (true) {
      switch (jj_nt.kind) {
        case SC_OR:
          {
            ;
            break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_5;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpression();
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jjtree.closeNodeScope(jjtn001, 2);
        jjtc001 = false;
        jjtn001.jjtSetLastToken(getToken(0));
        jjtn001.value = SelOp.OR;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  public final void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_6:
    while (true) {
      switch (jj_nt.kind) {
        case SC_AND:
          {
            ;
            break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_6;
      }
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SC_AND);
        EqualityExpression();
        jjtree.closeNodeScope(jjtn001, 2);
        jjtc001 = false;
        jjtn001.jjtSetLastToken(getToken(0));
        jjtn001.value = SelOp.AND;
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  public final void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch (jj_nt.kind) {
        case EQ:
        case NE:
          {
            ;
            break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_7;
      }
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch (jj_nt.kind) {
          case EQ:
            {
              jj_consume_token(EQ);
              RelationalExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.EQUAL;
              break;
            }
          case NE:
            {
              jj_consume_token(NE);
              RelationalExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.NOT_EQUAL;
              break;
            }
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  public final void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_8:
    while (true) {
      switch (jj_nt.kind) {
        case GT:
        case LT:
        case LE:
        case GE:
          {
            ;
            break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_8;
      }
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch (jj_nt.kind) {
          case LT:
            {
              jj_consume_token(LT);
              AdditiveExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.LT;
              break;
            }
          case GT:
            {
              jj_consume_token(GT);
              AdditiveExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.GT;
              break;
            }
          case LE:
            {
              jj_consume_token(LE);
              AdditiveExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.LTE;
              break;
            }
          case GE:
            {
              jj_consume_token(GE);
              AdditiveExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.GTE;
              break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  public final void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch (jj_nt.kind) {
        case PLUS:
        case MINUS:
          {
            ;
            break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_9;
      }
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch (jj_nt.kind) {
          case PLUS:
            {
              jj_consume_token(PLUS);
              MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.ADD;
              break;
            }
          case MINUS:
            {
              jj_consume_token(MINUS);
              MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.SUB;
              break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  public final void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch (jj_nt.kind) {
        case STAR:
        case SLASH:
        case REM:
          {
            ;
            break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_10;
      }
      ASTBinaryExpr jjtn001 = new ASTBinaryExpr(this, JJTBINARYEXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch (jj_nt.kind) {
          case STAR:
            {
              jj_consume_token(STAR);
              UnaryExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.MUL;
              break;
            }
          case SLASH:
            {
              jj_consume_token(SLASH);
              UnaryExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.DIV;
              break;
            }
          case REM:
            {
              jj_consume_token(REM);
              UnaryExpression();
              jjtree.closeNodeScope(jjtn001, 2);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
              jjtn001.value = SelOp.MOD;
              break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, 2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    }
  }

  // Not support ++i, i++, --i, i--, or ~i
  public final void UnaryExpression() throws ParseException {
    switch (jj_nt.kind) {
      case BANG:
      case PLUS:
      case MINUS:
        {
          ASTUnary jjtn001 = new ASTUnary(this, JJTUNARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
          try {
            switch (jj_nt.kind) {
              case MINUS:
                {
                  jj_consume_token(MINUS);
                  UnaryExpression();
                  jjtree.closeNodeScope(jjtn001, 1);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                  jjtn001.value = SelOp.MINUS;
                  break;
                }
              case PLUS:
                {
                  jj_consume_token(PLUS);
                  UnaryExpression();
                  jjtree.closeNodeScope(jjtn001, 1);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                  jjtn001.value = SelOp.PLUS;
                  break;
                }
              case BANG:
                {
                  jj_consume_token(BANG);
                  UnaryExpression();
                  jjtree.closeNodeScope(jjtn001, 1);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                  jjtn001.value = SelOp.NOT;
                  break;
                }
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {
                if (true) throw (RuntimeException) jjte001;
              }
            }
            if (jjte001 instanceof ParseException) {
              {
                if (true) throw (ParseException) jjte001;
              }
            }
            {
              if (true) throw (Error) jjte001;
            }
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, 1);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
          break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        {
          PrimaryExpression();
          break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  public final void PrimaryExpression() throws ParseException {
    /*@bgen(jjtree) PrimaryExpression */
    ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(this, JJTPRIMARYEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      PrimaryPrefix();
      label_11:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_11;
        }
        PrimarySuffix();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void PrimaryPrefix() throws ParseException {
    switch (jj_nt.kind) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        {
          Literal();
          break;
        }
      case LPAREN:
        {
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
          break;
        }
      case NEW:
        {
          AllocationExpression();
          break;
        }
      case IDENTIFIER:
        {
          Name();
          break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  // Not support new Foo().new Bar()
  public final void PrimarySuffix() throws ParseException {
    /*@bgen(jjtree) PrimarySuffix */
    ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(this, JJTPRIMARYSUFFIX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      switch (jj_nt.kind) {
        case LBRACKET:
          {
            ASTArrayIdx jjtn001 = new ASTArrayIdx(this, JJTARRAYIDX);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try {
              jj_consume_token(LBRACKET);
              Expression();
              jj_consume_token(RBRACKET);
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {
                  if (true) throw (RuntimeException) jjte001;
                }
              }
              if (jjte001 instanceof ParseException) {
                {
                  if (true) throw (ParseException) jjte001;
                }
              }
              {
                if (true) throw (Error) jjte001;
              }
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
              }
            }
            break;
          }
        case DOT:
          {
            jj_consume_token(DOT);
            ASTMethod jjtn002 = new ASTMethod(this, JJTMETHOD);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try {
              t = jj_consume_token(IDENTIFIER);
              jjtree.closeNodeScope(jjtn002, true);
              jjtc002 = false;
              jjtn002.jjtSetLastToken(getToken(0));
              jjtn002.value = SelString.of(t.image);
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
            switch (jj_nt.kind) {
              case LPAREN:
                {
                  ASTParams jjtn003 = new ASTParams(this, JJTPARAMS);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
                  try {
                    Arguments();
                  } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      {
                        if (true) throw (RuntimeException) jjte003;
                      }
                    }
                    if (jjte003 instanceof ParseException) {
                      {
                        if (true) throw (ParseException) jjte003;
                      }
                    }
                    {
                      if (true) throw (Error) jjte003;
                    }
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
                  }
                  break;
                }
              default:
                jj_la1[27] = jj_gen;
                ;
            }
            break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void Literal() throws ParseException {
    /*@bgen(jjtree) Literal */
    ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    Token t;
    try {
      switch (jj_nt.kind) {
        case INTEGER_LITERAL:
          {
            t = jj_consume_token(INTEGER_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelLong.of(t.image.replace("L", "").replace("l", ""));
            break;
          }
        case FLOATING_POINT_LITERAL:
          {
            t = jj_consume_token(FLOATING_POINT_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelDouble.of(t.image);
            break;
          }
        case STRING_LITERAL:
          {
            t = jj_consume_token(STRING_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelString.of(SelTypeUtil.preprocess(t.image));
            break;
          }
        case TRUE:
          {
            jj_consume_token(TRUE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelBoolean.of(true);
            break;
          }
        case FALSE:
          {
            jj_consume_token(FALSE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelBoolean.of(false);
            break;
          }
        case NULL:
          {
            jj_consume_token(NULL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = SelType.NULL;
            break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case PLUS:
      case MINUS:
        {
          ArgumentList();
          break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
    }
    jj_consume_token(RPAREN);
  }

  public final void ArgumentList() throws ParseException {
    Expression();
    label_12:
    while (true) {
      switch (jj_nt.kind) {
        case COMMA:
          {
            ;
            break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_12;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  public final void AllocationExpression() throws ParseException {
    /*@bgen(jjtree) AllocationExpression */
    ASTAllocationExpression jjtn000 = new ASTAllocationExpression(this, JJTALLOCATIONEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_5(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } else {
        switch (jj_nt.kind) {
          case NEW:
            {
              jj_consume_token(NEW);
              ClassType();
              switch (jj_nt.kind) {
                case LBRACKET:
                  {
                    ArrayDimsAndInits();
                    break;
                  }
                case LPAREN:
                  {
                    ASTArgs jjtn001 = new ASTArgs(this, JJTARGS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try {
                      Arguments();
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {
                          if (true) throw (RuntimeException) jjte001;
                        }
                      }
                      if (jjte001 instanceof ParseException) {
                        {
                          if (true) throw (ParseException) jjte001;
                        }
                      }
                      {
                        if (true) throw (Error) jjte001;
                      }
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
                    }
                    break;
                  }
                default:
                  jj_la1[32] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
              }
              break;
            }
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  /*
   * The second LOOKAHEAD specification below is to parse to PrimarySuffix
   * if there is an expression between the "[...]".
   *
   * only support simple 1D array as Maestro only support 1D array
   */
  public final void ArrayDimsAndInits() throws ParseException {
    if (jj_2_6(2)) {
      ASTArrayDims jjtn001 = new ASTArrayDims(this, JJTARRAYDIMS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {
            if (true) throw (RuntimeException) jjte001;
          }
        }
        if (jjte001 instanceof ParseException) {
          {
            if (true) throw (ParseException) jjte001;
          }
        }
        {
          if (true) throw (Error) jjte001;
        }
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
    } else {
      switch (jj_nt.kind) {
        case LBRACKET:
          {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            ArrayInitializer();
            break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
  }

  /*
   * Statement syntax follows.
   */

  // No support for label, do...while, switch, try...catch, throw, synchronized.
  public final void Statement() throws ParseException {
    /*@bgen(jjtree) Statement */
    ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
        case LBRACE:
          {
            Block();
            break;
          }
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          {
            Expression();
            jj_consume_token(SEMICOLON);
            break;
          }
        case IF:
          {
            IfStatement();
            break;
          }
        case WHILE:
          {
            WhileStatement();
            break;
          }
        case FOR:
          {
            ForStatement();
            break;
          }
        case BREAK:
          {
            BreakStatement();
            break;
          }
        case CONTINUE:
          {
            ContinueStatement();
            break;
          }
        case RETURN:
          {
            ReturnStatement();
            break;
          }
        case THROW:
          {
            ThrowStatement();
            break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void Block() throws ParseException {
    /*@bgen(jjtree) Block */
    ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
          case BOOLEAN:
          case BREAK:
          case CONTINUE:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case THROW:
          case TRUE:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case BANG:
          case PLUS:
          case MINUS:
            {
              ;
              break;
            }
          default:
            jj_la1[36] = jj_gen;
            break label_13;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void BlockStatement() throws ParseException {
    if (jj_2_7(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
        case BREAK:
        case CONTINUE:
        case FALSE:
        case FOR:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case THROW:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case PLUS:
        case MINUS:
          {
            Statement();
            break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
  }

  public final void LocalVariableDeclaration() throws ParseException {
    /*@bgen(jjtree) LocalVariableDeclaration */
    ASTLocalVariableDeclaration jjtn000 =
        new ASTLocalVariableDeclaration(this, JJTLOCALVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      VariableDeclarator();
      label_14:
      while (true) {
        switch (jj_nt.kind) {
          case COMMA:
            {
              ;
              break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_14;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void StatementExpression() throws ParseException {
    if (jj_2_8(2147483647)) {
      Assignment();
    } else {
      switch (jj_nt.kind) {
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          {
            PrimaryExpression();
            break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
  }

  public final void IfStatement() throws ParseException {
    /*@bgen(jjtree) IfStatement */
    ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch (jj_nt.kind) {
        case ELSE:
          {
            jj_consume_token(ELSE);
            Statement();
            break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void WhileStatement() throws ParseException {
    /*@bgen(jjtree) WhileStatement */
    ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // Only define and update a single loop variable inside for(...;...;...)
  public final void ForStatement() throws ParseException {
    /*@bgen(jjtree) ForStatement */
    ASTForStatement jjtn000 = new ASTForStatement(this, JJTFORSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
        case BOOLEAN:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          {
            ForInit();
            break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
      }
      jj_consume_token(SEMICOLON);
      switch (jj_nt.kind) {
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          {
            Expression();
            break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
      }
      jj_consume_token(SEMICOLON);
      switch (jj_nt.kind) {
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          {
            ForUpdate();
            break;
          }
        default:
          jj_la1[43] = jj_gen;
          ;
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void ForInit() throws ParseException {
    /*@bgen(jjtree) ForInit */
    ASTForInit jjtn000 = new ASTForInit(this, JJTFORINIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_9(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch (jj_nt.kind) {
          case FALSE:
          case NEW:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            {
              StatementExpression();
              break;
            }
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  public final void ForUpdate() throws ParseException {
    /*@bgen(jjtree) ForUpdate */
    ASTForUpdate jjtn000 = new ASTForUpdate(this, JJTFORUPDATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      StatementExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // no label support
  public final void BreakStatement() throws ParseException {
    /*@bgen(jjtree) BreakStatement */
    ASTBreakStatement jjtn000 = new ASTBreakStatement(this, JJTBREAKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // no label support
  public final void ContinueStatement() throws ParseException {
    /*@bgen(jjtree) ContinueStatement */
    ASTContinueStatement jjtn000 = new ASTContinueStatement(this, JJTCONTINUESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // MUST return something
  public final void ReturnStatement() throws ParseException {
    /*@bgen(jjtree) ReturnStatement */
    ASTReturnStatement jjtn000 = new ASTReturnStatement(this, JJTRETURNSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  // Throw an error message string
  public final void ThrowStatement() throws ParseException {
    /*@bgen(jjtree) ThrowStatement */
    ASTThrowStatement jjtn000 = new ASTThrowStatement(this, JJTTHROWSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true) throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true) throw (ParseException) jjte000;
        }
      }
      {
        if (true) throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_1();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(0, xla);
    }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_2();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(1, xla);
    }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_3();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(2, xla);
    }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_4();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(3, xla);
    }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_5();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(4, xla);
    }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_6();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(5, xla);
    }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_7();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(6, xla);
    }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_8();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(7, xla);
    }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return !jj_3_9();
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(8, xla);
    }
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
      jj_scanpos = xsp;
      if (jj_3R_74()) {
        jj_scanpos = xsp;
        if (jj_3R_75()) {
          jj_scanpos = xsp;
          if (jj_3R_76()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
      jj_scanpos = xsp;
      if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
      jj_scanpos = xsp;
      if (jj_3R_69()) {
        jj_scanpos = xsp;
        if (jj_3R_70()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(REM)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
      jj_scanpos = xsp;
      if (jj_3R_66()) {
        jj_scanpos = xsp;
        if (jj_3R_67()) return true;
      }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
      jj_scanpos = xsp;
      if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
      jj_scanpos = xsp;
      if (jj_3R_56()) {
        jj_scanpos = xsp;
        if (jj_3R_57()) {
          jj_scanpos = xsp;
          if (jj_3R_58()) return true;
        }
      }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
      jj_scanpos = xsp;
      if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
      jj_scanpos = xsp;
      if (jj_3R_25()) {
        jj_scanpos = xsp;
        if (jj_3R_26()) {
          jj_scanpos = xsp;
          if (jj_3R_27()) {
            jj_scanpos = xsp;
            if (jj_3R_28()) {
              jj_scanpos = xsp;
              if (jj_3R_29()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
      jj_scanpos = xsp;
      if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
      jj_scanpos = xsp;
      if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
      jj_scanpos = xsp;
      if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
      jj_scanpos = xsp;
      if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_20()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
      jj_scanpos = xsp;
      if (jj_scan_token(37)) {
        jj_scanpos = xsp;
        if (jj_scan_token(39)) {
          jj_scanpos = xsp;
          if (jj_scan_token(30)) {
            jj_scanpos = xsp;
            if (jj_scan_token(24)) return true;
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
      jj_scanpos = xsp;
      if (jj_3R_35()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
      jj_scanpos = xsp;
      if (jj_3R_81()) {
        jj_scanpos = xsp;
        if (jj_3R_82()) {
          jj_scanpos = xsp;
          if (jj_3R_83()) {
            jj_scanpos = xsp;
            if (jj_3R_84()) {
              jj_scanpos = xsp;
              if (jj_3R_85()) return true;
            }
          }
        }
      }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
      jj_scanpos = xsp;
      if (jj_3R_31()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public SelParserTokenManager token_source;

  JavaCharStream jj_input_stream;

  /** Current token. */
  public Token token;

  /** Next token. */
  public Token jj_nt;

  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  private final int[] jj_la1 = new int[45];
  private static int[] jj_la1_0;
  private static int[] jj_la1_1;
  private static int[] jj_la1_2;
  private static int[] jj_la1_3;

  static {
    jj_la1_init_0();
    jj_la1_init_1();
    jj_la1_init_2();
    jj_la1_init_3();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 =
        new int[] {
          0x0,
          0xc9206000,
          0x0,
          0x0,
          0x0,
          0x8000000,
          0x0,
          0x41002000,
          0x0,
          0x41002000,
          0x8000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x8000000,
          0x8000000,
          0x0,
          0x0,
          0x8000000,
          0x8000000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x88204000,
          0xc9206000,
          0x88204000,
          0x0,
          0x8000000,
          0x2000000,
          0x49002000,
          0x8000000,
          0x8000000,
          0x8000000,
        };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 =
        new int[] {
          0x8,
          0x624086a2,
          0x20000,
          0x0,
          0x0,
          0x42000600,
          0x0,
          0xa0,
          0x0,
          0xa0,
          0x42000600,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x0,
          0x42000600,
          0x42000600,
          0x0,
          0x0,
          0x42000400,
          0x42000600,
          0x0,
          0x0,
          0x200,
          0x0,
          0x62408602,
          0x624086a2,
          0x62408602,
          0x0,
          0x42000600,
          0x0,
          0x420006a0,
          0x42000600,
          0x42000600,
          0x42000600,
        };
  }

  private static void jj_la1_init_2() {
    jj_la1_2 =
        new int[] {
          0x0,
          0x401494,
          0x0,
          0x40000,
          0x80000,
          0x400494,
          0x20000,
          0x80,
          0x4000,
          0x0,
          0x400494,
          0x4000,
          0x80000,
          0x1000000,
          0x40000000,
          0x80000000,
          0x24000000,
          0x24000000,
          0x18300000,
          0x18300000,
          0x0,
          0x0,
          0x0,
          0x0,
          0x400000,
          0x400494,
          0x494,
          0x400,
          0x44000,
          0x14,
          0x400494,
          0x20000,
          0x4400,
          0x0,
          0x4000,
          0x401494,
          0x401494,
          0x401494,
          0x20000,
          0x494,
          0x0,
          0x494,
          0x400494,
          0x494,
          0x494,
        };
  }

  private static void jj_la1_init_3() {
    jj_la1_3 =
        new int[] {
          0x0, 0xc, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x11e000, 0x0, 0x0, 0x0, 0x0,
          0x0, 0x0, 0x0, 0xc, 0xc, 0x230, 0x230, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0,
          0x0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,
        };
  }

  private final JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SelParser(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public SelParser(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new SelParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SelParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SelParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SelParser(SelParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SelParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  private static final class LookaheadSuccess extends Error {}

  private final LookaheadSuccess jj_ls = new LookaheadSuccess();

  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0;
      Token tok = token;
      while (tok != null && tok != jj_scanpos) {
        i++;
        tok = tok.next;
      }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  /** Get the next Token. */
  public final Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  public final Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop:
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
        int[] oldentry = (int[]) (it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[120];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
          if ((jj_la1_2[i] & (1 << j)) != 0) {
            la1tokens[64 + j] = true;
          }
          if ((jj_la1_3[i] & (1 << j)) != 0) {
            la1tokens[96 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 120; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0:
                jj_3_1();
                break;
              case 1:
                jj_3_2();
                break;
              case 2:
                jj_3_3();
                break;
              case 3:
                jj_3_4();
                break;
              case 4:
                jj_3_5();
                break;
              case 5:
                jj_3_6();
                break;
              case 6:
                jj_3_7();
                break;
              case 7:
                jj_3_8();
                break;
              case 8:
                jj_3_9();
                break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch (LookaheadSuccess ls) {
      }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p = p.next = new JJCalls();
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  /* SEL parser. */
}
